import cv2
import numpy
import sys
import cvk2

def main():

    device = 0
    calibrateCamera(device)
    #capture = cv2.VideoCapture(device)
    #waitForStabilization(capture)


def calibrateCamera(device):
    h, w = 1000,1000
    white_grid = numpy.empty((h, w, 3))
    white_grid[:] = (255,255,255)
    circles = [(h/4, w/4), (h/2, w/4), (3*h/4, w/4), (h/4, w/2), (h/2, w/2), (3*h/4, w/2), (h/4, 3*w/4), (h/2, 3*w/4), (3*h/4, 3*w/4)]
    #will be the destination points used in the homgraphy
    image_points[9]
    cv2.imshow('white_grid' grid)
    #try to think of a way to get a good averaged image that
    #we can use to background subtract each stable image

    #for now, this will be the stable blank image we use
    stable_blank_frame = numpy.empty((h, w, 3))
    while 1:
        stable_blank_frame = waitForStabilization(device)
        break

    #needed to index image_points array down below
    int i = 0
    for circle in circles:
        dot_grid = numpy.empty((h, w, 3))
        dot_grid[:] = (255,255,255)
        cv2.circle(grid, circle, 10, (0,0,0), -1)
        cv2.imshow('grid', grid)
        stable_frame = numpy.empty((h, w, 3))
        while 1:
            stable_frame = waitForStabilization(device)
            break

        #background subtraction
        no_background = stable_blank_frame - stable_frame

        #threshold this image (need to figure good values)
        mask = cv2.threshold(no_background, 100, 255, cv2.THRESH_BINARY)[1]

        #dilate
        mask = cv2.dilate(mask, 20)

        # Find the contours in the image
        contours = cv2.findContours(mask, cv2.RETR_CCOMP,
                        cv2.CHAIN_APPROX_SIMPLE

        #get info from contours
        info = cvk2.getcontourinfo(contours[0][j])

        #add point to array
        image_points[i] = info['mean']
        i = i + 1

    #now we get a homography using collected points
    homography = cv2.findHomography(circles, image_points)


#new implementation using eroding (original implementation commented out
#below. We still need to figure out a way to get a good inital average
#image to do background subtraction
def waitForStabilization(capture):
    ok, frame = capture.read()

    #hack for now
    stable_frame = frame

    w = frame.shape[1]
    h = frame.shape[0]
#    prev_avg = numpy.empty_like(frame).astype(float)
#   new_avg = numpy.empty_like(frame).astype(float)

    while 1:
        ok, frame = capture.read()

        #background subtraction
        no_background = stable_frame - frame

        #threshold this image
        mask = cv2.threshold(no_background, 100, 255, cv2.THRESH_BINARY)[1]

        #erode
        mask = cv2.erode(mask, 20)

        #still need to figure out a good value (may want to ensure multiple
        #frames pass criteria
        if numpy.sum(mask) < 2000
            return frame
        else:
            cv2.putText(norm, "UNSTABLE", (16, h-16),
                    cv2.FONT_HERSHEY_SIMPLEX, 1.0,
                    (0,0,0), 3, cv2.CV_AA)

    # while 1:

    #     new_avg = numpy.empty_like(frame).astype(float)

    #     for i in range(10):
    #         ok, frame = capture.read()
    #         new_avg += frame

    #     new_avg = (new_avg / 10).astype('uint8')

    #     differences = new_avg.astype(float) - prev_avg.astype(float)
    #     norm = numpy.sqrt(differences*differences).astype('uint8')


    #     sum = numpy.sum(norm)
    #     print sum
    #     prev_avg = new_avg

#         if sum < 7000000:
#             #we want to return the image
#             return frame
#         else:
#             cv2.putText(norm, "UNSTABLE", (16, h-16),
#                     cv2.FONT_HERSHEY_SIMPLEX, 1.0,
#                     (0,0,0), 3, cv2.CV_AA)
            #if we need it later
#            cv2.putText(norm, "STABLE", (16, h-16),
#                    cv2.FONT_HERSHEY_SIMPLEX, 1.0,
#                    (0,0,0), 3, cv2.CV_AA)
#
#            cv2.putText(norm, "STABLE", (16, h-16),
#                    cv2.FONT_HERSHEY_SIMPLEX, 1.0,
#                    (255,255,255), 1, cv2.CV_AA)
#        else:
#            cv2.putText(norm, "UNSTABLE", (16, h-16),
#                    cv2.FONT_HERSHEY_SIMPLEX, 1.0,
#                    (0,0,0), 3, cv2.CV_AA)
#
#            cv2.putText(norm, "UNSTABLE", (16, h-16),
#                    cv2.FONT_HERSHEY_SIMPLEX, 1.0,
#                    (255,255,255), 1, cv2.CV_AA)

        cv2.imshow('Video', norm)





if __name__ == '__main__':
    main()

